import { GoogleSpreadsheet } from "google-spreadsheet";
import moment from "moment";
import { NextRequest } from "next/server";

export async function GET(req: NextRequest) {
  const searchParams = req.nextUrl.searchParams;
  const rowIndexStr: string | null = searchParams.get("rowIndex");

  if (!rowIndexStr) {
    return new Response("No row index provided");
  }

  const rowIndex: number = Number(rowIndexStr) - 2;

  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet(
    "1x35VvwNmJuqfpVxSzoIdLThe3ZeUKTInMVCZ_lnaEYE"
  );

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL as string,
    private_key: process.env.GOOGLE_PRIVATE_KEY as string,
  });

  await doc.loadInfo(); // loads document properties and worksheets

  const sheet = doc.sheetsByIndex[0];

  // read rows
  const rows = await sheet.getRows(); // can pass in { limit, offset }

  console.log(rows);
  console.log("route.ts rows[rowIndex] " + rowIndex);
  console.log(rows[rowIndex].Date);

  if (rows[rowIndex]) {
    // read/write row values
    rows[rowIndex].Confirmed = "Y"; // update a value
    await rows[rowIndex].save(); // save updates

    // rows[1].email = "sergey@abc.xyz"; // update a value
    console.log("Updated row " + rowIndex);
    return new Response("Updated row " + rowIndex);
  } else {
    console.log("Failed updating row " + rowIndex);
    return new Response("Failed updating row " + rowIndex);
  }
}
